@model WestBlueGolfLeagueWeb.Models.ViewModels.ResultsTableViewModel

@{
    ViewBag.Title = "Details";
}

@section JavaScript
{
    <script type="text/javascript">
        var showEquitable = function () {
            $("#equitableTable").show();
            $("#scoreTable").hide();
            $("#pointsTable").hide();
        }
        var showScore = function () {
            $("#equitableTable").hide();
            $("#scoreTable").show();
            $("#pointsTable").hide();
        }
        var showPoints = function () {
            $("#equitableTable").hide();
            $("#scoreTable").hide();
            $("#pointsTable").show();
        }
    </script>
}

<div class="row">
    <div class="col-md-3 list-group">
        <ul>
            @foreach (var t in this.Model.TeamsForYear)
            {
                if (t.id == this.Model.Team.id)
                {
                    <li class="list-group-item">@t.teamName</li>
                }
                else
                {
                    <li class="list-group-item">@Html.ActionLink(t.teamName, "Details", "ResultsTable", new { id = t.id }, null)</li>
                }
            }
        </ul>
    </div>

    <div class="col-md-9">
        <div class="row text-center">
            <div class="btn-group btn-group-lg">
                <button type="button" class="btn btn-default" onclick="showEquitable()" autofocus>Equitable Score</button>
                <button type="button" class="btn btn-default" onclick="showScore()">Score</button>
                <button type="button" class="btn btn-default" onclick="showPoints()">Points</button>
            </div>
        </div>
        <div id="equitableTable">
            <h4><a href="/Team/@this.Model.Team.id">@this.Model.Team.teamName</a> (Equitable Score)</h4>
            <table class="table">
                <tr>
                    <th>Name</th>
                    <th>0</th>
                    @foreach (var w in this.Model.WeeksForYear)
                    {
                        <th>@w.seasonIndex</th>
                    }
                    <th>Handicap</th>
                </tr>
                <tr>
                    <td></td>
                    <td>36</td>
                    @foreach (var w in this.Model.WeeksForYear)
                    {
                        <td>@w.course.par</td>
                    }
                    <td></td>
                </tr>
                @foreach (var p in this.Model.PlayersForTeamForYear)
                {
                    string boldClass = p.CompleteResultsForYear.Count() < 5 ? "score-bold" : "score-normal";
                    var playerResults = p.CompleteResultsForYear;
                    <tr>
                        <td><a href="/Player/@p.Player.id">@p.Player.name</a></td>

                        <td class=@boldClass>@p.YearData.week0Score</td>

                        @foreach (var w in this.Model.WeeksForYear)
                        {
                            var resultForWeekForPlayer = playerResults.Where(x => x.match.teammatchup.weekId == w.id).FirstOrDefault();
                            // If no bold scores yet, look to see how many remaining results. If bold scores have happened, we know all future scores are
                            if (boldClass == "score-normal")
                            {
                                var remainingResults = playerResults.Where(x => x.match.teammatchup.week.date > w.date);
                                boldClass = remainingResults.Count() < 5 ? "score-bold" : "score-normal";
                            }
                            if (resultForWeekForPlayer == null)
                            {
                                <td></td>
                            }
                            else
                            {
                                // Equitable if we have it; could have said year >= 2015
                                if (resultForWeekForPlayer.scoreVariant != null && resultForWeekForPlayer.scoreVariant > 0)
                                {
                                    <td class=@boldClass>@resultForWeekForPlayer.scoreVariant</td>
                                }
                                else
                                {
                                    <td class=@boldClass>@resultForWeekForPlayer.score</td>
                                }
                            }
                        }
                        <td>+@p.YearData.finishingHandicap</td>
                    </tr>
                }
            </table>
            <span><span class="score-bold">38</span> - bold numbers used for handicap calculation (week 0 counted up to 3 times for veteran golfers, only once for rookies)</span>
        </div>
        <div id="scoreTable" class="results-table">
            <h4><a href="/Team/@this.Model.Team.id">@this.Model.Team.teamName</a> (Score)</h4>
            <table class="table">
                <tr>
                    <th>Name</th>
                    <th>0</th>
                    @foreach (var w in this.Model.WeeksForYear)
                    {
                        <th>@w.seasonIndex</th>
                    }
                    <th>Average</th>
                </tr>
                <tr>
                    <td></td>
                    <td>36</td>
                    @foreach (var w in this.Model.WeeksForYear)
                    {
                        <td>@w.course.par</td>
                    }
                    <td></td>
                </tr>
                @foreach (var p in this.Model.PlayersForTeamForYear)
                {
                    // Keep track of total over par
                    var totalScore = 0;
                    var playerResults = p.CompleteResultsForYear;
                    <tr>
                        <td><a href="/Player/@p.Player.id">@p.Player.name</a></td>
                        <td>@p.YearData.week0Score</td>

                        @foreach (var w in this.Model.WeeksForYear)
                        {
                            var resultForWeekForPlayer = playerResults.Where(x => x.match.teammatchup.weekId == w.id).FirstOrDefault();
                            if (resultForWeekForPlayer == null)
                            {
                                <td></td>
                            }
                            else
                            {
                                var points = resultForWeekForPlayer.points;
                                <td class=@(points > 12 ? "score-bold" : "score-normal")>@resultForWeekForPlayer.score</td>
                                totalScore += ((int)resultForWeekForPlayer.score - w.course.par);
                            }
                        }

                        @if (playerResults.Count() > 0)
                        {
                            <td>+@(totalScore / playerResults.Count())</td>
                        }
                        else
                        {
                            <td>+0</td>
                        }
                    </tr>
                }
            </table>
            <span><span class="score-bold">39</span> - bold numbers used to denote wins</span>
        </div>
        <div id="pointsTable" class="results-table">
            <h4><a href="/Team/@this.Model.Team.id">@this.Model.Team.teamName</a> (Points)</h4>
            <table class="table">
                <tr>
                    <th>Name</th>
                    <th>0</th>
                    @foreach (var w in this.Model.WeeksForYear)
                    {
                        <th>@w.seasonIndex</th>
                    }
                    <th>Total</th>
                    <th>Average</th>
                </tr>
                <tr>
                    <td></td>
                    <td>36</td>
                    @foreach (var w in this.Model.WeeksForYear)
                    {
                        <td>@w.course.par</td>
                    }
                    <td></td>
                    <td></td>
                </tr>
                @foreach (var p in this.Model.PlayersForTeamForYear)
                {
                    var playerResults = p.CompleteResultsForYear;
                    <tr>
                        <td><a href="/Player/@p.Player.id">@p.Player.name</a></td>
                        <td>-</td>

                        @foreach (var w in this.Model.WeeksForYear)
                        {
                            var resultForWeekForPlayer = playerResults.Where(x => x.match.teammatchup.weekId == w.id).FirstOrDefault();
                            if (resultForWeekForPlayer == null)
                            {
                                <td></td>
                            }
                            else
                            {
                                var points = resultForWeekForPlayer.points;
                                // Account for when your team members play for other teams, your team doesn't get the points
                                bool sub = resultForWeekForPlayer.teamId != this.Model.Team.id;
                                string pointsStr = points.ToString() + (sub ? "*" : "");
                                <td class=@(points > 12 ? "score-bold" : "score-normal")>@pointsStr</td>
                            }
                        }

                        @if (playerResults.Count() > 0)
                        {
                            <td>@(playerResults.Sum(x => x.points))</td>
                        }
                        else
                        {
                            <td>0</td>
                        }
                        
                        @if (playerResults.Count() > 0)
                        {
                            double averagePoints = (double)playerResults.Sum(x => x.points) / playerResults.Count();
                            double truncated = Math.Truncate(averagePoints * 100) / 100;
                            <td>@truncated</td>
                        }
                        else
                        {
                            <td>0</td>
                        }
                    </tr>
                }
                <tr>
                    <td>Subs</td>
                    <td>-</td>
                    @{
                        var yearid = this.Model.WeeksForYear.ElementAt(0).year.id;
                        var thisTeam = this.Model.Team;
                        var allResults = thisTeam.results.Where(x => x.match.teammatchup.week.yearId == yearid);
                        //var subResults = allResults.Where(x => x.player.playeryeardatas.Where(y => y.year.id == yearid).FirstOrDefault().team.id != thisTeam.id);

                        var subResults = new System.Collections.ObjectModel.Collection<result>();
                        foreach (var r in allResults)
                        {
                            var data = r.player.playeryeardatas.Where(y => y.year.id == yearid);
                            if (data == null || data.Count() == 0)
                            {
                                // Should fall into here with the failing LINQ statement above...
                            }
                            else
                            {
                                if (data.FirstOrDefault().teamId != thisTeam.id)
                                {
                                    subResults.Add(r);
                                }
                            }
                        }

                        foreach (var w in this.Model.WeeksForYear)
                        {
                            var subResultsForWeek = subResults.Where(x => x.match.teammatchup.weekId == w.id);
                            if (subResultsForWeek == null)
                            {
                                <td></td>
                            }
                            else
                            {
                                var pointsForSubs = subResultsForWeek.Sum(x => x.points);
                                if (pointsForSubs > 0)
                                {
                                    <td class=@(pointsForSubs > 12 * subResultsForWeek.Count() ? "score-bold" : "score-normal")>@pointsForSubs</td>
                                }
                                else
                                {
                                    <td></td>
                                }
                            }
                        }

                        if (subResults.Count() > 0)
                        {
                            <td>@(subResults.Sum(x => x.points))</td>
                        }
                        else
                        {
                            <td>0</td>
                        }

                        if (subResults.Count() > 0)
                        {
                            <td>@(subResults.Sum(x => x.points) / subResults.Count())</td>
                        }
                        else
                        {
                            <td>0</td>
                        }
                    }
                </tr>
                <tr>
                    <td>Team</td>
                    <td>-</td>
                    @{
                        foreach (var w in this.Model.WeeksForYear)
                        {
                            var resultsForWeek = allResults.Where(x => x.match.teammatchup.weekId == w.id);
                            if (resultsForWeek.Count() > 0)
                            {
                                var pointsForWeek = resultsForWeek.Sum(x => x.points);
                                <td class=@(pointsForWeek > 48 ? "score-bold" : "score-normal")>@pointsForWeek</td>
                            }
                            else
                            {
                                <td></td>
                            }
                        }

                        // Tabulate the team's total points   
                        if (allResults.Count() > 0)
                        {
                            <td>@(allResults.Sum(x => x.points))</td>
                        }
                        else
                        {
                            <td>0</td>
                        }

                        // Tabulate the team's weekly average points, match average x 4    
                        if (allResults.Count() > 0)
                        {
                            double averagePoints = (double)allResults.Sum(x => x.points) * 4 / allResults.Count();
                            double truncated = Math.Truncate(averagePoints * 100) / 100;
                            <td>@truncated</td>
                        }
                        else
                        {
                            <td>0</td>
                        }
                    }
                </tr>
            </table>
            <p><span class="score-bold">16</span> - bold numbers used to denote wins</p>
            <p>* - indicates match played for a different team</p>
        </div>
    </div>
</div>
